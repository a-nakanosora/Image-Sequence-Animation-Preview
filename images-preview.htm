<html>
<head>
<title>Image Sequence Animation Preview</title>
<!-- v0.4 -->
<style>
.row {
    margin: 10px 0px;
}
.row2 {
    margin: 2px 0px;
}
.oneline-text {
    width:40px;
}
</style>
</head>

<body>
<div>
    <div class="row">
        <input tyoe="file" class="drop" placeholder="drop directory here" style="width:25ex; padding:5px;">
        or select files:
        <input type="file" class="select-files" name="files[]" multiple />
    </div>

    <div class="row">
        screen size: <span class="size">0x0</span>
    </div>

    <div class="row">
        <div class="row2">
            <button onclick="fpsDec()">-</button>
            fps:<input type="text" class="fps oneline-text" rows="1">
            <button onclick="fpsInc()">+</button>
        </div>
        <div class="row2">
            <button onclick="zoomOut()">-</button>
            zoom:<input type="text" class="zoom oneline-text" rows="1" disabled="true">
            <button onclick="zoomIn()">+</button>
            <button onclick="zoomReset()">*</button>
        </div>
    </div>
    <div class="playback row">
        <button class="exec-start" onclick="startLoop()">start</button>
        <button class="exec-stop"  onclick="stopLoop()">stop</button>
        frame:<input type="text" class="playback-frame oneline-text" rows="1">
        / <span class="frame-length">0</span>
        (start frame: <span class="start-frame"></span>)

        <div class="row2">
            <button onclick="prevFrame()"> &lt; </button>
            <button onclick="nextFrame()"> &gt; </button>
        </div>
    </div>
    <div class="status"></div>
</div>
<hr>
<canvas class="preview" width="1" height="1"></canvas>


<script>
function main(){
    elem.size = document.querySelector('.size')
    elem.fps = document.querySelector('.fps')
    elem.zoom = document.querySelector('.zoom')
    elem.frame = document.querySelector('.playback-frame')
    elem.frameLength = document.querySelector('.frame-length')
    elem.canvas = document.querySelector('.preview')
    elem.status = document.querySelector('.status')
    elem.startFrame = document.querySelector('.start-frame')
    for(const n in elem)
        console.assert(!!elem[n])

    ///
    elem.fps.value = state.fps.toFixed(1)
    elem.fps.addEventListener('input', e=>{
        if(!e.isTrusted)
            return
        fpsChange(e.target.value)
    })
    elem.zoom.value = state.zoom.toFixed(1)
    elem.startFrame.innerText = '0'
    elem.frame.value = '0'
    elem.frame.addEventListener('input', e=>{
        if(!e.isTrusted)
            return
        frameChange(e.target.value)
    })

    const elemFileSelector = document.querySelector('.select-files')
    elemFileSelector.addEventListener('change', fileChange)

    const dropArea = document.querySelector('.drop')
    dropArea.addEventListener('drop', ev=>{
        ev.preventDefault()

        const items = ev.dataTransfer.items
        for (const itemi of items) {
            const item = itemi.webkitGetAsEntry()
            if (item && item.isDirectory) {
                dropArea.placeholder = item.name
                dropArea.style.width = `${Math.max(item.name.length + 5, 25)}ex`

                const prs = []
                const reader = item.createReader()
                reader.readEntries(entries=>{
                    for (const et of entries)
                        if(et.isFile)
                            prs.push(new Promise((ok,ng)=> et.file(ok, ng)))

                    Promise.all(prs).then(e=>{
                        const o = {target: {files: e}}
                        fileChange(o)
                    })
                }, err=>console.warn('err',err))
                return
            }
        }
    })
}

const requestAnimationFrame = window.requestAnimationFrame

const elem = {}

const state = {
    fps: 24,
    imgs: [],
    animframeLoop: null,
    zoom: 1.0,
    startFrame: 0,
    currentFrame: 0,
    resampleTimestamp: true,
}


const status = {
    label(text){ elem.status.textContent = text },
    size(width, height){ elem.size.textContent = `${width}x${height}` },
    frameLength(l){ elem.frameLength.textContent = l }
}

function setImmediate(f){setTimeout(f,1)}

function fileChange(e){
    stopLoop()
    revokeImgs()
    status.label('loading...')

    setImmediate(_=>{
        const prs = []
        for(const f of e.target.files){
            if(!f.type.match(/image./))
                continue

            prs.push(new Promise((ok,ng)=>{
                const img = new Image()
                img.onload = _=>{
                    ok({name:f.name, img})
                }
                img.src = URL.createObjectURL(f)
            }))
        }

        Promise.all(prs).then(e=>{
            status.label('')
            initImageSequence(e)
        })
    })
}

function revokeImgs(){
    for(const img of state.imgs)
        URL.revokeObjectURL(img.src)
}

function fpsChange(v){
    if(v && !isNaN(v))
        state.fps = Number(v)
    elem.fps.value = String(v).trim().replace(/\D+/g, '')
    resetFrame()
}

function frameChange(v){
    if(v && !isNaN(v))
        setStartFrame( Number(v) )
    elem.frame.value = String(v).trim().replace(/\D+/g, '')
    resetFrame()
}

function fpsDec(){
    state.fps /= Math.sqrt(2)
    elem.fps.value = state.fps.toFixed(1)
    resetFrame()
}
function fpsInc(){
    state.fps *= Math.sqrt(2)
    elem.fps.value = state.fps.toFixed(1)
    resetFrame()
}
function zoomOut(){
    state.zoom /= Math.sqrt(2)
    _setZoom()
}
function zoomIn(){
    state.zoom *= Math.sqrt(2)
    _setZoom()
}
function zoomReset(){
    state.zoom = 1.0
    _setZoom()
}
function _setZoom(){
    Object.assign(elem.canvas.style, {
        transform: `scale(${state.zoom})`,
        'transform-origin': 'left top 0px',
    })
    elem.zoom.value = state.zoom.toFixed(1)
}

function prevFrame(){
    stopLoop()
    updateFrame(getCurrentFrame()-1)
}
function nextFrame(){
    stopLoop()
    updateFrame(getCurrentFrame()+1)
}
function resetFrame(){
    state.resampleTimestamp = true
}
function setStartFrame(i){
    state.startFrame = i
    elem.startFrame.innerText = i
}
function getCurrentFrame(){
    return state._currentFrame
}
function setCurrentFrame(i){
    state._currentFrame = i
    elem.frame.value = i
}

function initImageSequence(e){
    console.assert(e instanceof Array)
    console.assert(e.every(obj=>obj.name&&obj.img))

    if(e.length === 0)
        return

    const numberOfImage = path=>{
        const m = path.match(/(\d+)\.[^\.]+$/)
        return m ? Number(m[1]) : -1
    }
    e.sort((a,b)=> numberOfImage(a.name)-numberOfImage(b.name))
    state.imgs = e.map(obj=>obj.img)
    const im = state.imgs[0]
    state.canvasSize = {width:im.naturalWidth, height: im.naturalHeight}
    status.size(state.canvasSize.width, state.canvasSize.height)
    status.frameLength(state.imgs.length)
    setStartFrame(0)
    setCurrentFrame(0)
    startLoop()
}

function fixedFrameIndex(idx){
    const l = state.imgs.length
    return (idx+l) % l
}
function renderImage(img, canvas){
    const ctx = canvas.getContext('2d')
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    ctx.drawImage(img, 0, 0)
}
function updateFrame(frame){
    frame = fixedFrameIndex(frame)
    const cnv = elem.canvas
    renderImage(state.imgs[frame], cnv)
    setCurrentFrame(frame)
}

function stopLoop(){
    if(state.animframeLoop)
        state.animframeLoop.stop()
    state.animframeLoop = null
    elem.frame.disabled = false
}

function startLoop(){
    stopLoop()
    resetFrame()
    elem.frame.disabled = true
    const cnv = elem.canvas
    cnv.width = state.canvasSize.width
    cnv.height = state.canvasSize.height
    const ctx = cnv.getContext('2d')
    state.animframeLoop = new AnimationFrameLoop()
    let t0 = -1
    let baseFrame = state.startFrame
    state.animframeLoop.start(timestamp=>{
        const cf = getCurrentFrame()
        if(state.resampleTimestamp) {
            baseFrame = t0<0 ? state.startFrame : cf
            t0 = timestamp
            state.resampleTimestamp = false
        }
        const interval = 1000/Math.round(state.fps)
        const idx = fixedFrameIndex( (((timestamp - t0)/interval)<<0) + baseFrame )
        if(idx !== cf)
            updateFrame(idx)
    })
}

class AnimationFrameLoop {
    constructor(){
        this.running = false
    }
    start(f){
        if(this.running)
            return
        this.running = true

        const loop = timestamp=>{
            if(!this.running)
                return
            f(timestamp)
            requestAnimationFrame(loop)
        }
        requestAnimationFrame(loop)
    }
    stop(){
        this.running = false
    }
}

main()
</script>

</body>
</html>
